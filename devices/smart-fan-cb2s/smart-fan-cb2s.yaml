substitutions:
  # default name is used as base for MAC suffix unique name generated by ESPHome
  name: "smart-fan-cb2s"
  friendly_name: "Smart Ceiling Fan Controller"
  comment: ""
  timer_max: "8"
  timer_step: "0.5"

esphome:
  project:
    name: broccoliboy.smart-fan-cb2s
    version: "2.0"

packages:
  hardware: !include ../../hardware/boards/cb2s.yaml
  base: !include ../../common/base.yaml

# need external component for custom tuya module
external_components:
  # - source: ../components  # uncomment to use local components folder for development
  - source: github://broccoliboy/esphome-config
    refresh: 0s
    components: [ tuya ]

logger:
  level: INFO
  baud_rate: 0

uart:
  rx_pin: P10
  tx_pin: P11
  baud_rate: 9600

# Register the Tuya MCU connection
tuya:

switch:
  - platform: tuya
    id: tuya_switch_beep
    name: "Beep"
    entity_category: config
    switch_datapoint: 66
    inverted: true
#   - platform: template
#     id: soft_start_switch
#     name: "Soft Start"
#     entity_category: config
#     optimistic: true

light:
  - platform: tuya
    id: tuya_light
    name: "Light"
    switch_datapoint: 20
    dimmer_datapoint: 22
    min_value: 0
    max_value: 1000
    # on_state:
    #   then:
    #     - lambda: |-
    #         // hack for some led drivers that only turn on if initial brightness is low
    #         // ESP_LOGI("tuya_light", "is_on = %b, brightness = %f", id(tuya_light).remote_values.is_on(), id(tuya_light).remote_values.get_brightness());
    #         if (id(soft_start_switch).state && !id(tuya_light).remote_values.is_on() && (id(tuya_light).remote_values.get_brightness() > 0.4)) {
    #           id(tuya_light).make_call().set_brightness(0.3).perform();
    #         }

fan:
  - platform: tuya
    id: tuya_fan
    name: "Fan"
    switch_datapoint: 60
    speed_datapoint: 62

number:
  - platform: tuya
    id: light_timer
    name: "Light Timer"
    number_datapoint: 26
    min_value: 0
    max_value: ${timer_max}
    step: ${timer_step}
    multiply: 3600
    on_value:
      then:
        - lambda: |-
            // only set timer if light is on (necessary to keep MCU and ESP in sync)
            if (x > 0 && !id(tuya_light).remote_values.is_on()) {
              id(light_timer).make_call().set_value(0).perform();
            }
  - platform: tuya
    id: fan_timer
    name: "Fan Timer"
    number_datapoint: 64
    min_value: 0
    max_value: ${timer_max}
    step: ${timer_step}
    multiply: 60
    on_value:
      then:
        - lambda: |-
            // only set timer if fan is on (necessary to keep MCU and ESP in sync)
            if (x > 0 && !id(tuya_fan).state) {
              id(fan_timer).make_call().set_value(0).perform();
            }
